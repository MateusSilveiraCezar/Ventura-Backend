import nodemailer from "nodemailer";
import dotenv from "dotenv";

dotenv.config(); // Garante que as vari√°veis de ambiente est√£o carregadas localmente

class EmailService {
  private transporter;

  constructor() {
    const emailUser = process.env.EMAIL_USER;
    const emailPass = process.env.EMAIL_PASS;
    const emailHost = process.env.EMAIL_HOST;
    // Tenta usar a porta 587 por padr√£o se n√£o estiver definida
    const emailPort = process.env.EMAIL_PORT ? parseInt(process.env.EMAIL_PORT, 10) : 587; 

    if (!emailUser || !emailPass || !emailHost) {
      console.error("‚ö†Ô∏è Credenciais de e-mail (USER, PASS ou HOST) n√£o est√£o definidas nas vari√°veis de ambiente.");
      // Lan√ßa erro apenas se n√£o estiver em ambiente de produ√ß√£o (onde o Render injeta as vari√°veis)
      if (process.env.NODE_ENV !== 'production') {
          throw new Error("Credenciais de e-mail ausentes. Verifique o .env");
      }
    }

    // Configura√ß√£o SMTP Flex√≠vel
    this.transporter = nodemailer.createTransport({
      host: emailHost, // <-- O Render precisa de um host que aceite conex√µes
      port: emailPort,   // <-- A porta deve ser permitida pelo Render (ex: 2525)
      secure: emailPort === 465, // Use SSL/TLS se for a porta 465
      auth: {
        user: emailUser,
        pass: emailPass,
      },
      // Adiciona um timeout maior para evitar que o NodeMailer desista muito r√°pido
      connectionTimeout: 10000, // 10 segundos
    });

    console.log(`‚úÖ Transportador SMTP configurado para Host: ${emailHost}:${emailPort}`);
  }

  async enviarEmail(destinatario: string, tarefas: string[]) {
    if (!destinatario) {
      console.error("Destinat√°rio n√£o informado");
      return;
    }

    console.log(`üìß Tentando enviar e-mail para: ${destinatario}`);
    console.log("üìã Tarefas a enviar:", tarefas);

    try {
      const info = await this.transporter.sendMail({
        from: `"Sistema Imobili√°ria" <${process.env.EMAIL_USER}>`,
        to: destinatario,
        subject: "Tarefas em andamento",
        html: `
          <h2>Ol√°!</h2>
          <p>Voc√™ possui as seguintes tarefas em andamento:</p>
          <ul>
            ${tarefas.map(t => `<li>${t}</li>`).join("")}
          </ul>
        `
      });

      console.log(`‚úÖ E-mail enviado com sucesso para ${destinatario}`);
      console.log("Mensagem ID:", info.messageId);
      return info;
    } catch (err) {
      console.error("‚ùå Erro ao enviar e-mail:", err);
      // O erro 'ETIMEDOUT' vir√° daqui se o Render bloquear a porta.
      throw err; // relan√ßa para ser tratado no controller
    }
  }
}

// Exporta uma inst√¢ncia pronta
export default new EmailService();